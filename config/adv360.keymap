#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        l_paren_caret: l_paren_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "L_PAREN_CARET";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        r_paren_ampersand: r_paren_ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "R_PAREN_AMPERSAND";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        under_minus: under_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDER_MINUS";
            bindings = <&kp UNDERSCORE>, <&kp KP_MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        percent_greaterthan: percent_greaterthan {
            compatible = "zmk,behavior-mod-morph";
            label = "PERCENT_GREATERTHAN";
            bindings = <&kp PERCENT>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lessthan_dollar: lessthan_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "LESSTHAN_DOLLAR";
            bindings = <&kp LESS_THAN>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pipe_backslash: pipe_backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "PIPE_BACKSLASH";
            bindings = <&kp PIPE>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        pound_lessthan: pound_lessthan {
            compatible = "zmk,behavior-mod-morph";
            label = "POUND_LESSTHAN";
            bindings = <&kp POUND>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bang_at: bang_at {
            compatible = "zmk,behavior-mod-morph";
            label = "BANG_AT";
            bindings = <&kp EXCLAMATION>, <&kp AT_SIGN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        multiply_and_printscr: multiply_and_printscr {
            compatible = "zmk,behavior-mod-morph";
            label = "MULTIPLY_AND_PRINTSCR";
            bindings = <&kp KP_MULTIPLY>, <&kp PRINTSCREEN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_and_comma: dot_and_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_AND_COMMA";
            bindings = <&kp KP_DOT>, <&kp KP_COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        colon_and_semicolon: colon_and_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_AND_SEMICOLON";
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        dollar_and_0: dollar_and_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLLAR_AND_0";
            bindings = <&kp DOLLAR>, <&kp N0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        q-1 {
            bindings = <&kp N1>;
            key-positions = <39 15>;
            timeout-ms = <500>;
        };

        w-2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <39 16>;
            timeout-ms = <500>;
        };

        e-3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <39 17>;
            timeout-ms = <500>;
        };

        r-4 {
            bindings = <&kp NUMBER_4>;
            key-positions = <39 18>;
            timeout-ms = <500>;
        };

        t-5 {
            bindings = <&kp N5>;
            key-positions = <39 19>;
            timeout-ms = <500>;
        };

        y-6 {
            bindings = <&kp NUMBER_6>;
            key-positions = <34 22>;
            timeout-ms = <500>;
        };

        u-7 {
            bindings = <&kp N7>;
            key-positions = <34 23>;
            timeout-ms = <500>;
        };

        i-8 {
            bindings = <&kp N8>;
            key-positions = <34 24>;
            timeout-ms = <500>;
        };

        o-9 {
            bindings = <&kp N9>;
            key-positions = <34 25>;
            timeout-ms = <500>;
        };

        p-0 {
            bindings = <&kp N0>;
            key-positions = <34 26>;
            timeout-ms = <500>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &bang_at  &under_minus                &pound_lessthan  &dollar_and_0  &percent_greaterthan  &tog 1                                                                                    &mo 3                                  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL  &l_paren_caret               &r_paren_ampersand    &multiply_and_printscr
&kp DEL    &kp Q     &kp W                       &kp E            &kp R          &kp T                 &kp RG(RC(RIGHT_SHIFT))                                                                   &kp LG(LC(LEFT_SHIFT))                 &kp Y             &kp U              &kp I      &kp O                        &kp P                 &pipe_backslash
&kp TAB    &kp A     &kp S                       &kp D            &kp F          &kp G                 &mt RG(RC(RIGHT_ALT)) RG(RC(RIGHT_ALT))  &kp LSHIFT  &kp LALT      &kp LGUI   &kp RSHIFT  &mt LG(LC(LEFT_ALT)) LG(LC(LEFT_ALT))  &kp H             &kp J              &kp K      &kp L                        &colon_and_semicolon  &kp SQT
&kp LCTRL  &kp Z     &kp X                       &kp C            &kp V          &kp B                                                                      &kp HOME      &kp PG_UP                                                     &kp N             &kp M              &kp COMMA  &kp DOT                      &kp FSLH              &kp RCTRL
&mo 2      &kp CAPS  &kp LA(LC(LG(LEFT_SHIFT)))  &kp LEFT         &kp RIGHT                            &kp BSPC                                 &kp ESCAPE  &kp END       &kp PG_DN  &kp ENTER   &kp SPACE                                                &kp UP             &kp DOWN   &kp RA(RC(RG(RIGHT_SHIFT)))  &kp INS               &mo 2
            >;
        };

        keypad {
            bindings = <
&kp LC(NUMBER_6)  &kp LC(N1)  &kp LC(N2)                  &kp LC(N3)        &kp LC(N4)        &kp LC(N5)  &trans                                                                                   &mo 3                   &kp LEFT_BRACE     &kp KP_NUM    &kp EQUAL     &kp SLASH                    &kp STAR        &kp PIPE
&kp DELETE        &kp LC(Q)   &kp LC(W)                   &kp LS(N8)        &kp LS(N7)        &kp LC(T)   &kp RG(RC(RIGHT_SHIFT))                                                                  &kp LG(LC(LEFT_SHIFT))  &kp LEFT_BRACKET   &kp N7        &kp N8        &kp N9                       &kp MINUS       &kp BSLH
&kp TAB           &kp LC(A)   &kp LS(NUMBER_6)            &kp LS(N5)        &kp LS(NUMBER_4)  &kp LC(G)   &kp RC(RG(RIGHT_ALT))    &kp LEFT_SHIFT  &kp LALT      &kp LGUI               &kp N0     &kp LC(LG(LEFT_ALT))    &kp RIGHT_BRACKET  &kp NUMBER_4  &kp N5        &kp NUMBER_6                 &kp PLUS        &kp APOS
&kp LCTRL         &kp LC(Z)   &kp LS(NUMBER_3)            &kp LS(NUMBER_2)  &kp LS(NUMBER_1)  &kp LC(V)                                            &kp HOME      &kp LEFT_PARENTHESIS                                      &kp RIGHT_BRACE    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3                 &dot_and_comma  &kp RSHFT
&mo 2             &kp CAPS    &kp LA(LC(LG(LEFT_SHIFT)))  &kp LEFT          &kp RIGHT                     &kp BSPC                 &kp ESCAPE      &kp END       &kp RIGHT_PARENTHESIS  &kp ENTER  &kp SPACE                                  &kp UP        &kp DOWN      &kp RA(RC(RG(RIGHT_SHIFT)))  &kp COMMA       &mo 2
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 3   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
