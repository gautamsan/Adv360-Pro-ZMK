#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        l_paren_caret: l_paren_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "L_PAREN_CARET";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        r_paren_ampersand: r_paren_ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "R_PAREN_AMPERSAND";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        under_minus: under_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDER_MINUS";
            bindings = <&kp UNDERSCORE>, <&kp KP_MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        v_lbrace: v_lbrace {
            compatible = "zmk,behavior-mod-morph";
            label = "V_LBRACE";
            bindings = <&kp V>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LGUI|MOD_LALT)>;
        };

        b_rbrace: b_rbrace {
            compatible = "zmk,behavior-mod-morph";
            label = "B_RBRACE";
            bindings = <&kp B>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        j_equals: j_equals {
            compatible = "zmk,behavior-mod-morph";
            label = "J_EQUALS";
            bindings = <&kp J>, <&kp KP_EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        u_and_7: u_and_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "U_AND_7";
            bindings = <&kp U>, <&kp KP_N7>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        k_lessthan: k_lessthan {
            compatible = "zmk,behavior-mod-morph";
            label = "K_LESSTHAN";
            bindings = <&kp K>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        d_lbracket: d_lbracket {
            compatible = "zmk,behavior-mod-morph";
            label = "D_LBRACKET";
            bindings = <&kp D>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        f_rbracket: f_rbracket {
            compatible = "zmk,behavior-mod-morph";
            label = "F_RBRACKET";
            bindings = <&kp F>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        e_lparen: e_lparen {
            compatible = "zmk,behavior-mod-morph";
            label = "E_LPAREN";
            bindings = <&kp E>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        r_rparen: r_rparen {
            compatible = "zmk,behavior-mod-morph";
            label = "R_RPAREN";
            bindings = <&kp R>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        o_minus: o_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "O_MINUS";
            bindings = <&kp O>, <&kp KP_MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

        i_and_8: i_and_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "I_AND_8";
            bindings = <&kp I>, <&kp KP_N8>;

            #binding-cells = <0>;
            mods = <(MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

        h_under: h_under {
            compatible = "zmk,behavior-mod-morph";
            label = "H_UNDER";
            bindings = <&kp H>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

        n_div: n_div {
            compatible = "zmk,behavior-mod-morph";
            label = "N_DIV";
            bindings = <&kp N>, <&kp KP_DIVIDE>;

            #binding-cells = <0>;
            mods = <(MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

        l_colon: l_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "L_COLON";
            bindings = <&kp L>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        y_and_6: y_and_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "Y_AND_6";
            bindings = <&kp Y>, <&kp KP_N6>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        greaterthan_percent: greaterthan_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "GREATERTHAN_PERCENT";
            bindings = <&kp GREATER_THAN>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lessthan_dollar: lessthan_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "LESSTHAN_DOLLAR";
            bindings = <&kp LESS_THAN>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pipe_backslash: pipe_backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "PIPE_BACKSLASH";
            bindings = <&kp PIPE>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        pound_Ins: pound_Ins {
            compatible = "zmk,behavior-mod-morph";
            label = "POUND_INS";
            bindings = <&kp POUND>, <&kp INSERT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bang_at: bang_at {
            compatible = "zmk,behavior-mod-morph";
            label = "BANG_AT";
            bindings = <&kp EXCLAMATION>, <&kp AT_SIGN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        q_and_1: q_and_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_AND_1";
            bindings = <&kp Q>, <&kp KP_NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        w_and_2: w_and_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "W_AND_2";
            bindings = <&kp W>, <&kp KP_NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        e_and_3: e_and_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "E_AND_3";
            bindings = <&kp E>, <&kp KP_NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        r_and_4: r_and_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "R_AND_4";
            bindings = <&kp R>, <&kp KP_NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        t_and_5: t_and_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "T_AND_5";
            bindings = <&kp T>, <&kp KP_NUMBER_5>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        o_and_9: o_and_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "O_AND_9";
            bindings = <&kp O>, <&kp KP_NUMBER_9>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        p_and_0: p_and_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "P_AND_0";
            bindings = <&kp P>, <&kp KP_NUMBER_0>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };

        multiply_and_printscr: multiply_and_printscr {
            compatible = "zmk,behavior-mod-morph";
            label = "MULTIPLY_AND_PRINTSCR";
            bindings = <&kp KP_MULTIPLY>, <&kp PRINTSCREEN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_and_comma: dot_and_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_AND_COMMA";
            bindings = <&kp KP_DOT>, <&kp KP_COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        shift-space-enter {
            bindings = <&kp ENTER>;
            key-positions = <35 70>;
        };

        shift-backspace-esc {
            bindings = <&kp ESCAPE>;
            key-positions = <38 65>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &bang_at                    &under_minus  &pound_Ins  &lessthan_dollar  &greaterthan_percent  &tog 1                                                                                    &mo 3                                  &kp EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &l_paren_caret   &r_paren_ampersand  &multiply_and_printscr
&kp DEL    &q_and_1                    &w_and_2      &e_and_3    &r_and_4          &t_and_5              &kp RG(RC(RIGHT_SHIFT))                                                                   &kp LG(LC(LEFT_SHIFT))                 &y_and_6   &u_and_7          &i_and_8           &o_and_9         &p_and_0            &pipe_backslash
&kp ESC    &kp A                       &kp S         &kp D       &kp F             &kp G                 &mt RG(RC(RIGHT_ALT)) RG(RC(RIGHT_ALT))  &kp LSHIFT  &kp LALT      &kp LGUI   &kp RSHIFT  &mt LG(LC(LEFT_ALT)) LG(LC(LEFT_ALT))  &kp H      &kp J             &kp K              &kp L            &kp SEMICOLON       &kp SQT
&kp LCTRL  &kp Z                       &kp X         &kp C       &kp V             &kp B                                                                      &kp HOME      &kp PG_UP                                                     &kp N      &kp M             &kp COMMA          &kp DOT          &kp FSLH            &kp RCTRL
&mo 2      &kp LA(LC(LG(LEFT_SHIFT)))  &kp CAPS      &kp LEFT    &kp RIGHT                               &kp BSPC                                 &kp TAB     &kp END       &kp PG_DN  &kp ENTER   &kp SPACE                                         &kp UP            &kp DOWN           &kp KP_NUMBER_9  &kp KP_NUMBER_0     &mo 2
            >;
        };

        keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                               &mo 3      &kp LEFT_BRACE     &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE   &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                                &none      &kp LEFT_BRACKET   &kp KP_N7   &kp KP_N8     &kp KP_N9       &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI               &kp KP_N0  &none      &kp RIGHT_BRACKET  &kp KP_N4   &kp KP_N5     &kp KP_N6       &kp KP_PLUS      &kp APOS
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp LEFT_PARENTHESIS                         &kp RIGHT_BRACE    &kp KP_N1   &kp KP_N2     &kp KP_N3       &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp TAB    &kp END       &kp RIGHT_PARENTHESIS  &kp ENTER  &kp SPACE                     &kp UP      &kp DOWN      &dot_and_comma  &kp RBKT         &mo 2
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 3   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
